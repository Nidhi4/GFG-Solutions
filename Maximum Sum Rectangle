#include <stdio.h>
#include <string.h>
#include <limits.h>
#define ROW 4
#define COL 5

int kadane(int* arr, int n)
{
	int i = 0 ;
	int sum = 0 ;
	int maxSum = INT_MIN ;

	for(i=0 ; i<n ; ++i)
	{
		sum = sum + arr[i] ;

		if(sum < 0)
		{
			sum = 0 ;
		}
		else if(sum > maxSum)
		{
			maxSum = sum ;
		}
	}

	return maxSum ;
}

void findMaxSum(int M[ROW][COL])
{
	int i = 0 ;
	int sum = 0 ;
	int maxSum = INT_MIN ;
	int left = 0 ;
	int right = 0 ;
	int temp[ROW] ;

	for(left=0 ; left<COL ; ++left)
	{
		memset(temp, 0, sizeof(temp));
		for(right=left ; right<COL ; ++right)
		{
			for(i=0 ; i<ROW ; ++i)
			{
				temp[i] = temp[i] + M[i][right] ;
			}
			sum = kadane(temp, ROW) ;
			if(sum > maxSum)
			{
				maxSum = sum ;
			}
		}
	}
	printf("Max sum is: %d\n", maxSum);
}


int main()
{
    int M[ROW][COL] = {{1, 2, -1, -4, -20},
                       {-8, -3, 4, 2, 1},
                       {3, 8, 10, 1, 3},
                       {-4, -1, 1, 7, -6}
                      };

    findMaxSum(M);

    return 0;
}
